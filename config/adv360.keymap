#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <75>;
        };

        //
        // Home row mod-tap keys for all except index fingers
        //

        homey_left: miryoku_hrm_left_hand {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_LEFT_HAND";
            flavor = "balanced";
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 39 40 41 42 43 44 45 54 55 56 57 58 59 71 72 73 74 75 35 36 52 65 66 67 37 38 53 68 69 70>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <175>;
            quick-tap-ms = <160>;
            global-quick-tap; // with typing streak
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        homey_right: miryoku_hrm_right_hand {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_RIGHT_HAND";
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 37 38 53 68 69 70>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <175>;
            quick-tap-ms = <160>;
            global-quick-tap; // with typing streak
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        //
        // Special home row mod-tap keys for the index fingers
        //

        index_left: miryoku_hrm_left_index_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_LEFT_INDEX_SHIFT";
            flavor = "tap-preferred";
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 69 70 71 72 73 74 75 37 38 53 68 69 35 36 52 65 66 67>;

            //hold-trigger-on-release; // don't wait for other mods

            tapping-term-ms = <180>;
            quick-tap-ms = <300>; // enable repeat
            //global-quick-tap; // no typing streak

            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        index_right: miryoku_hrm_right_index_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_RIGHT_INDEX_SHIFT";
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 2 3 4 5 6 37 37 38 53 68 69 70>;

            //hold-trigger-on-release; // don't wait for other mods

            tapping-term-ms = <180>;
            quick-tap-ms = <300>; // enable repeat
            //global-quick-tap; // no typing streak

            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        //
        // Thumb cluster hold-tap keys for Miryoku layers
        //

        thumb: miryoku_thumb_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "MIRYOKU_LAYER_TAP_WITH_REPEAT";
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <300>; // enable repeat
            //global-quick-tap; // no typing streak

            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };

        mouse_td: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "MOUSE_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp DEL>, <&tog 4>;
        };

        mouse_hold: mouse_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MOUSE_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&mouse_td>;
        };

        layer_hold: layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };
    };

    macros {
        switchapps: switchapps {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCMD>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LCMD>;

            label = "SWITCHAPPS";
        };

        toggletalon: toggletalon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp F1>,
                <&macro_pause_for_release>,
                <&macro_release>;

            label = "TOGGLETALON";
        };

        vimmac: vimmac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(SLASH))>, <&macro_release>;

            label = "VIMMAC";
        };

        resetwarp: resetwarp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LG(SPACE)))>, <&macro_release>;

            label = "RESETWARP";
        };

        clickleft: clickleft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(LG(SPACE))))>, <&macro_release>;

            label = "CLICKLEFT";
        };

        clickright: clickright {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(LG(R))))>, <&macro_release>;

            label = "CLICKRIGHT";
        };

        launchbar: launchbar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE)>, <&macro_release>;

            label = "LAUNCHBAR";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        maltron {
            bindings = <
&mt F1 EQUAL                       &mt F2 N1               &mt F3 N2         &mt F4 N3     &mt F5 N4  &mt F6 N5       &launchbar                                                                                  &switchapps      &mt F7 N6      &mt F8 N7      &mt F9 N8      &mt F10 N9         &mt RS(F11) N0  &mt RS(F12) MINUS
&mt RS(LEFT_BRACKET) LEFT_BRACKET  &kp Q                   &kp P             &kp Y         &lt 4 C    &kp B           &kp TAB                                                                                     &kp KP_MULTIPLY  &kp V          &kp M          &kp U          &kp Z              &kp L           &mt RS(RIGHT_BRACKET) RIGHT_BRACKET
&kp ESC                            &kp A                   &kp N             &kp I         &kp S      &kp F           &vimmac     &homey_left HOME BACKSPACE  &kp END            &kp LEFT_ARROW  &kp RIGHT_ARROW  &kp KP_DIVIDE    &kp D          &kp T          &kp H          &kp O              &kp R           &kp SINGLE_QUOTE
&sk LSHFT                          &kp COMMA               &kp PERIOD        &kp J         &kp G      &mt CAPS GRAVE                                          &kp PG_UP          &kp UP_ARROW                                      &kp SEMICOLON  &kp W          &kp K          &kp X              &kp SLASH       &sk RIGHT_SHIFT
&sk LEFT_SHIFT                     &mt RS(PIPE) BACKSLASH  &kp LEFT_CONTROL  &kp LEFT_GUI  &kp LALT                   &thumb 2 E  &lt 3 TAB                   &kp PAGE_DOWN      &kp DOWN_ARROW  &lt 3 ENTER      &thumb 2 SPACE                  &kp RIGHT_ALT  &kp RIGHT_GUI  &kp RIGHT_CONTROL  &kp SLASH       &sk RIGHT_SHIFT
            >;
        };

        qwerty {
            bindings = <
&mo 4      &kp N1              &kp N2              &kp N3               &kp N4               &kp N5  &launchbar                                                                                                                  &switchapps  &kp N6  &kp N7                &kp N8                &kp N9               &kp N0                       &kp MINUS
&kp TAB    &kp Q               &kp W               &lt 5 E              &lt 4 R              &kp T   &kp TAB                                                                                                                     &kp ENTER    &kp Y   &kp U                 &kp I                 &kp O                &kp P                        &kp BACKSLASH
&kp ESC    &homey_left LALT A  &homey_left LGUI S  &homey_left LCTRL D  &index_left LSHFT F  &kp G   &kp ESC          &homey_left LCTRL ESC  &kp LALT                   &kp LALT                 &kp LCTRL                       &vimmac      &kp H   &index_right RSHFT J  &homey_right RCTRL K  &homey_right LGUI L  &homey_right RALT SEMICOLON  &kp SQT
&kp LSHFT  &kp Z               &kp X               &kp C                &kp V                &kp B                                           &homey_left LGUI HOME      &homey_right RGUI PG_UP                                               &kp N   &kp M                 &kp COMMA             &kp PERIOD           &kp SLASH                    &mt RIGHT_SHIFT EQUAL
&tog 2     &kp GRAVE           &kp CAPS            &kp LEFT             &kp RIGHT                    &lt 2 BACKSPACE  &kp TAB                &kp END                    &kp PG_DN                &homey_right RIGHT_SHIFT ENTER  &lt 2 SPACE          &kp UP                &kp DOWN              &kp LBKT             &kp RBKT                     &toggletalon
            >;
        };

        fn {
            bindings = <
&kp F1         &kp F2              &kp F3           &kp F4          &kp F5                &kp F6     &tog 5                                                        &mo 3             &kp F7                &kp F8                  &kp F9                   &kp F10            &kp F11        &kp F12
&kp LG(LC(S))  &kp HOME            &kp LC(LS(TAB))  &kp LC(T)       &kp LC(TAB)           &trans     &trans                                                        &kp RS(NUMBER_9)  &kp RS(LEFT_BRACKET)  &kp RS(RIGHT_BRACKET)   &kp LEFT_BRACKET         &kp RIGHT_BRACKET  &trans         &trans
&tog 2         &kp LEFT_ARROW      &kp UP_ARROW     &kp DOWN_ARROW  &mt LEFT_SHIFT RIGHT  &kp PG_UP  &trans      &trans  &trans      &trans             &kp RSHFT  &kp RS(N0)        &kp F5                &kp F9                  &kp F10                  &kp F12            &kp F11        &trans
&kp HOME       &kp LC(Z)           &kp LC(X)        &kp LC(C)       &kp LC(V)             &kp PG_DN                      &trans      &trans                                          &trans                &trans                  &trans                   &trans             &trans         &trans
&kp END        &kp LC(LEFT_ARROW)  &kp LC(HOME)     &kp LC(END)     &tog 2                           &kp DELETE  &trans  &trans      &kp LA(BACKSPACE)  &kp ENTER  &kp BACKSPACE                           &kp LC(LA(LEFT_ARROW))  &kp LC(LA(RIGHT_ARROW))  &trans             &kp BACKSLASH  &kp PIPE
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0      &bt BT_SEL 1   &bt BT_SEL 2      &bt BT_SEL 3   &bt BT_SEL 4      &none                                                                                      &trans           &none         &none       &none       &none      &none  &none
&none  &none             &kp LS(MINUS)  &kp EQUAL         &kp LS(EQUAL)  &kp LS(QUESTION)  &bootloader                                                                                &bootloader      &kp KP_EQUAL  &kp KP_N7   &kp KP_N8   &kp KP_N9  &none  &none
&none  &kp LS(NUMBER_4)  &kp MINUS      &kp LS(NUMBER_6)  &kp LC(N0)     &kp QUESTION      &none        &kp LA(BACKSPACE)  &kp RC(BACKSPACE)      &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5  &kp KP_DIVIDE    &kp KP_DOT    &kp KP_N4   &kp KP_N5   &kp KP_N6  &none  &none
&none  &none             &none          &none             &kp RS(PIPE)   &kp PIPE                                          &none                  &none                                                &none         &none       &none       &none      &none  &none
&none  &none             &none          &none             &tog 3                           &kp DEL      &none              &none                  &none       &bl BL_TOG              &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none      &none  &none
            >;
        };

        mouse_layer {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                              &trans                  &none         &none       &none       &none      &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                                        &bootloader             &kp KP_EQUAL  &kp KP_N7   &kp KP_N8   &kp KP_N9  &none  &none
&none  &none         &none         &none         &none         &none         &none         &none        &none      &bt BT_CLR  &none            &rgb_ug RGB_MEFS_CMD 5  &kp KP_DOT    &kp KP_N4   &kp KP_N5   &kp KP_N6  &none  &none
&none  &none         &none         &none         &macro_ver    &none                                    &none      &none                                                &none         &none       &none       &none      &none  &none
&none  &none         &none         &none         &none                       &kp KP_MINUS  &kp KP_PLUS  &none      &none       &kp KP_MULTIPLY  &kp KP_DIVIDE                         &bl BL_INC  &bl BL_DEC  &none      &none  &none
            >;
        };

        mouse_warp {
            bindings = <
&kp EQUAL  &kp N1     &kp N2          &kp N3                  &kp N4                   &kp N5     &trans                                                         &mo 4       &kp N6                   &kp KP_NUM              &kp KP_EQUAL            &kp KP_DIVIDE           &kp KP_MULTIPLY  &kp MINUS
&kp TAB    &kp Q      &kp HOME        &kp UP_ARROW            &kp END                  &kp PG_UP  &none                                                          &none       &resetwarp               &kp LS(LA(LC(LG(F1))))  &kp LS(LA(LC(LG(F2))))  &kp LS(LA(LC(LG(F3))))  &kp KP_MINUS     &kp BSLH
&kp ESC    &kp A      &kp LEFT_ARROW  &kp DOWN_ARROW          &kp RIGHT_ARROW          &kp PG_DN  &none       &kp LSHFT    &kp LGUI      &kp LGUI   &kp LSHFT    &none       &kp LC(LG(LA(LS(F10))))  &kp LS(LA(LC(LG(F4))))  &kp LS(LA(LC(LG(F5))))  &kp LS(LA(LC(LG(F6))))  &kp KP_PLUS      &kp SQT
&kp LSHFT  &kp Z      &kp X           &kp LA(LS(LEFT_ARROW))  &kp LA(LS(RIGHT_ARROW))  &kp B                               &kp HOME      &kp PG_UP                           &kp RC(RA(N))            &kp LA(LC(LG(LS(F7))))  &kp LA(LC(LG(LS(F8))))  &kp LG(LC(LA(LS(F9))))  &kp KP_ENTER     &kp RSHFT
&mo 3      &kp GRAVE  &kp CAPS        &kp LA(LEFT_ARROW)      &kp LA(RIGHT_ARROW)                 &clickleft  &clickright  &kp END       &kp PG_DN  &clickright  &clickleft                           &kp LEFT                &kp DOWN                &kp UP_ARROW            &kp RIGHT        &mo 2
            >;
        };
    };
};
